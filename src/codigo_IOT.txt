#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

BLEServer* pServer = nullptr;
BLECharacteristic* pCharacteristic = nullptr;

bool deviceConnected = false;

#define SERVICE_UUID "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"

// Lista de zonas possíveis
const char* zonas[] = {"A1", "A2", "B1", "B2", "C1", "C2"};
const int numZonas = sizeof(zonas) / sizeof(zonas[0]);

class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
    Serial.println("✅ Cliente conectado!");
  }

  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
    Serial.println("🔁 Cliente desconectado. Reiniciando BLE...");
    delay(100);
    BLEDevice::startAdvertising();
  }
};

void setup() {
  Serial.begin(115200);
  BLEDevice::init("Moto_01_v2");

  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  BLEService* pService = pServer->createService(SERVICE_UUID);

  pCharacteristic = pService->createCharacteristic(
    CHARACTERISTIC_UUID,
    BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_NOTIFY
  );

  pCharacteristic->addDescriptor(new BLE2902());
  pCharacteristic->setValue("ZONA:A1");

  pService->start(); // 🚨 ESSENCIAL: iniciar o serviço ANTES do advertising

  BLEAdvertising* pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->start();

  Serial.println("🚀 BLE pronto, aguardando conexão...");

  // Inicializa o gerador de números aleatórios
  randomSeed(analogRead(0));
}

void loop() {
  if (deviceConnected) {
    // Escolhe uma zona aleatória
    int idx = random(numZonas);
    String zonaAleatoria = "ZONA:" + String(zonas[idx]);
    
    // Envia via BLE
    pCharacteristic->setValue(zonaAleatoria.c_str());
    pCharacteristic->notify();
    Serial.print("📤 Notificando: ");
    Serial.println(zonaAleatoria);

    delay(2000); // Espera 2 segundos
  }
}
